import os
from dotenv import load_dotenv
from langchain.llms import OpenAI
from langchain.document_loaders import PyPDFLoader
from langchain.vectorstores import FAISS
from langchain.embeddings.openai import OpenAIEmbeddings

print("You've imported the AI module!")

# load environment variables
load_dotenv()

print("Environment variables loaded!")

# initialize OpenAI language model
llm = OpenAI()

print("OpenAI language model initialized!")

# get path to textbook pdf
this_path = os.path.dirname(os.path.abspath(__file__))
assets_path = os.path.join(this_path, '..', 'assets')
pdf_path = os.path.join(assets_path, 'textbook.pdf')

print("Path to textbook pdf obtained!")

# initialize pdf loader
loader = PyPDFLoader(pdf_path)

print("PDF loader initialized!")

# load textbook
pages = loader.load_and_split()

print("Textbook loaded!")

faiss_index = FAISS.from_documents(pages, OpenAIEmbeddings())
docs = faiss_index.similarity_search("How does react work with node?", k=2)
for doc in docs:
    print(str(doc.metadata["page"]) + ":", doc.page_content[:300])

print("FAISS index initialized!")

def get_page(page_number: int):
    """
    This function takes a page number as input and returns the page text.
    
    Args:
    - page_number (int): The page number of the textbook.
    
    Returns:
    - page_text (str): The text of the textbook page.
    """
    page_text = pages[page_number]
    return page_text

def ask(question: str):
    """
    This function takes a question as input and returns a response generated by the OpenAI language model.
    It prints the input question and the generated response to the console.
    
    Args:
    - question (str): The question to be asked to the OpenAI language model.
    
    Returns:
    - response (str): The response generated by the OpenAI language model.
    """
    response = llm.predict(question)
    print("You asked: " + question)
    print("AI responded: " + response)
    return response